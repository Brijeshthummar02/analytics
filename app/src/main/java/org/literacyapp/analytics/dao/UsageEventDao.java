package org.literacyapp.analytics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.Calendar;
import org.literacyapp.analytics.dao.converter.CalendarConverter;
import org.literacyapp.analytics.dao.converter.LiteracySkillConverter;
import org.literacyapp.analytics.dao.converter.NumeracySkillConverter;
import org.literacyapp.model.enums.content.LiteracySkill;
import org.literacyapp.model.enums.content.NumeracySkill;

import org.literacyapp.analytics.model.UsageEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USAGE_EVENT".
*/
public class UsageEventDao extends AbstractDao<UsageEvent, Long> {

    public static final String TABLENAME = "USAGE_EVENT";

    /**
     * Properties of entity UsageEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property PackageName = new Property(3, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property LiteracySkill = new Property(4, String.class, "literacySkill", false, "LITERACY_SKILL");
        public final static Property NumeracySkill = new Property(5, String.class, "numeracySkill", false, "NUMERACY_SKILL");
    }

    private final CalendarConverter timeConverter = new CalendarConverter();
    private final LiteracySkillConverter literacySkillConverter = new LiteracySkillConverter();
    private final NumeracySkillConverter numeracySkillConverter = new NumeracySkillConverter();

    public UsageEventDao(DaoConfig config) {
        super(config);
    }
    
    public UsageEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USAGE_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 1: deviceId
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 3: packageName
                "\"LITERACY_SKILL\" TEXT," + // 4: literacySkill
                "\"NUMERACY_SKILL\" TEXT);"); // 5: numeracySkill
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USAGE_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsageEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
        stmt.bindLong(3, timeConverter.convertToDatabaseValue(entity.getTime()));
        stmt.bindString(4, entity.getPackageName());
 
        LiteracySkill literacySkill = entity.getLiteracySkill();
        if (literacySkill != null) {
            stmt.bindString(5, literacySkillConverter.convertToDatabaseValue(literacySkill));
        }
 
        NumeracySkill numeracySkill = entity.getNumeracySkill();
        if (numeracySkill != null) {
            stmt.bindString(6, numeracySkillConverter.convertToDatabaseValue(numeracySkill));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsageEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
        stmt.bindLong(3, timeConverter.convertToDatabaseValue(entity.getTime()));
        stmt.bindString(4, entity.getPackageName());
 
        LiteracySkill literacySkill = entity.getLiteracySkill();
        if (literacySkill != null) {
            stmt.bindString(5, literacySkillConverter.convertToDatabaseValue(literacySkill));
        }
 
        NumeracySkill numeracySkill = entity.getNumeracySkill();
        if (numeracySkill != null) {
            stmt.bindString(6, numeracySkillConverter.convertToDatabaseValue(numeracySkill));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UsageEvent readEntity(Cursor cursor, int offset) {
        UsageEvent entity = new UsageEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // deviceId
            timeConverter.convertToEntityProperty(cursor.getLong(offset + 2)), // time
            cursor.getString(offset + 3), // packageName
            cursor.isNull(offset + 4) ? null : literacySkillConverter.convertToEntityProperty(cursor.getString(offset + 4)), // literacySkill
            cursor.isNull(offset + 5) ? null : numeracySkillConverter.convertToEntityProperty(cursor.getString(offset + 5)) // numeracySkill
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsageEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getString(offset + 1));
        entity.setTime(timeConverter.convertToEntityProperty(cursor.getLong(offset + 2)));
        entity.setPackageName(cursor.getString(offset + 3));
        entity.setLiteracySkill(cursor.isNull(offset + 4) ? null : literacySkillConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setNumeracySkill(cursor.isNull(offset + 5) ? null : numeracySkillConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UsageEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UsageEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UsageEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
